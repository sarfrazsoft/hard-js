// Class Hoisting //
Unlike functions, and other JavaScript declarations, class declarations are not hoisted.
That means that you must declare a class before you can use it
Ref: https://www.w3schools.com/js/js_class_inheritance.asp


// Static class methods are defined on the class itself. //
You cannot call a static method on an object, only on an object class.
Ref: https://www.w3schools.com/js/js_class_static.asp

// Pure Functions //

A pure function is a fundamental concept in functional programming. It's a type of function that has two key characteristics:

1. **Deterministic**: Given the same input, a pure function will always produce the same output. There are no hidden dependencies or side effects.

2. **No Side Effects**: A pure function doesn't modify any data outside its scope. It doesn't change any variables, objects, or data structures in the surrounding environment, and it doesn't perform any observable actions, such as writing to the console, making network requests, or modifying the DOM.

Here's an example of a pure function:

```javascript
function add(a, b) {
  return a + b;
}

const result = add(3, 4); // The result will always be 7
```

In this example, the `add` function is pure because:

- It takes two arguments (`a` and `b`).
- It performs a deterministic operation (addition).
- It returns a result based solely on its input.

Here's an example of a non-pure function:

```javascript
let total = 0;

function addToTotal(number) {
  total += number;
}

addToTotal(5); // Modifies the external variable 'total'
```

In this example, the `addToTotal` function is not pure because:

- It modifies an external variable (`total`).
- Its behavior is not deterministic; the result depends on the current state of `total`.

Pure functions have several important advantages:

1. **Predictability**: Since pure functions always produce the same output for the same input, they are predictable and easy to reason about, which helps in debugging and understanding code.

2. **Testability**: Pure functions are easy to test because you can isolate them from the rest of your code. You don't need to worry about setting up a complex environment or dealing with side effects when testing them.

3. **Concurrency**: In a concurrent or parallel programming environment, pure functions are inherently thread-safe because they don't rely on shared state.

4. **Memoization**: You can cache the results of pure function calls, which can lead to performance optimizations in scenarios where the same input is provided multiple times.

5. **Functional Programming**: Pure functions are a fundamental concept in functional programming, and writing code in a functional style often leads to cleaner, more maintainable code.

While it's not always possible or practical to make every function pure (as some functions need to have side effects), following the principle of pure functions whenever feasible can lead to more reliable and maintainable code.


// Q3: Difference between function statement and expression
// The major difference between these two lies in Hoisting.

a(); // "Hello A"
b(); // TypeError
function a() {
console.log("Hello A");
}
var b = function() {
console.log("Hello B");
}
// Why? During memory creation phase a is created in memory and
// function assigned to a. But b is created like a variable (b: undefined)
// and until code reaches the function() part, it is still undefined. So, it
// cannot be called

First Class Functions

In JavaScript, a function is considered "first-class" if it satisfies the following criteria:

1. **Functions as Values**: Functions can be assigned to variables, passed as arguments to other functions, or returned as values from other functions. This means you can treat functions like any other data type, such as numbers or strings.

2. **Functions as Arguments**: You can pass functions as arguments to other functions. This is a fundamental concept in functional programming and allows for higher-order functions, which are functions that operate on or return other functions.

3. **Functions as Return Values**: Functions can be returned as the result of another function. This is often used in scenarios like closures, where a function captures and "remembers" its outer scope.

Here are examples of first-class functions in JavaScript:

1. Assigning a function to a variable:

   ```javascript
   const greet = function(name) {
     return `Hello, ${name}!`;
   };
   ```

2. Passing a function as an argument:

   ```javascript
   function execute(func) {
     return func();
   }
   execute(function() {
     console.log("This is a function passed as an argument.");
   });
   ```

3. Returning a function from another function:

   ```javascript
   function multiplier(factor) {
     return function(x) {
       return x * factor;
     };
   }
   const double = multiplier(2);
   console.log(double(5)); // Output: 10
   ```

First-class functions are a fundamental feature of JavaScript and are essential for functional programming techniques, callbacks, closures, and many other advanced programming patterns. They provide flexibility and expressive power, allowing developers to write more concise and modular code.

In JavaScript, functions are considered first-class citizens, which means they can be used as values, passed as arguments, and returned as results, as explained in the concept of first-class functions. However, there are some functions in JavaScript that are not first-class functions, and this distinction is related to the nature and origin of these functions.

The primary reason not all functions in JavaScript are first-class functions is because of the distinction between built-in functions and user-defined functions:

1. **User-Defined Functions**: Functions that you define in your JavaScript code, such as function expressions or function declarations, are indeed first-class functions. You can assign them to variables, pass them as arguments, and return them from other functions.

   ```javascript
   const greet = function(name) {
     return `Hello, ${name}!`;
   };

   function execute(func) {
     return func();
   }

   execute(greet); // Passes the greet function as an argument
   ```

2. **Built-In Functions**: Some functions in JavaScript, like `console.log`, `setTimeout`, and `parseInt`, are not first-class functions in the same sense. These functions are provided by the JavaScript runtime or the browser environment. While you can still pass them around and use them as arguments, they don't behave exactly like user-defined functions because they are more tightly integrated with the environment.

   For example, `setTimeout` expects a function as its argument, but it's specifically designed to work with its own scheduling mechanism and timing. Similarly, `console.log` is a built-in method for outputting to the console.

   ```javascript
   setTimeout(function() {
     console.log("This is a built-in function passed to setTimeout.");
   }, 1000);
   ```

In summary, the distinction between first-class functions and functions that may not appear to be first-class functions is often related to their purpose and integration with the JavaScript runtime or the environment in which JavaScript is used. Both user-defined functions and built-in functions are essential components of JavaScript, and they can be used effectively in various programming scenarios.

Advantages of Closure
Closures in JavaScript offer several advantages that are key to understanding and utilizing various programming patterns and techniques. Here's an explanation of how closures contribute to each of the mentioned advantages:

1. **Module Design Pattern**:
   - **Explanation**: Closures enable the creation of modules in JavaScript. A module is a self-contained unit of code that encapsulates and abstracts functionality. Closures allow you to create private variables and functions within a module, keeping them inaccessible from the outside world. You expose only the necessary parts through a public API, providing a clean and organized way to structure your code.
   - **Example**:
     ```javascript
     function createCounter() {
       let count = 0; // Private variable
       return {
         increment: function() {
           count++;
         },
         getCount: function() {
           return count;
         }
       };
     }
     const counter = createCounter();
     counter.increment();
     console.log(counter.getCount()); // Accessing a private variable via a closure
     ```

2. **Currying**:
   - **Explanation**: Currying is a technique in functional programming where a function is transformed into a series of unary (single-argument) functions. Closures are essential for currying because they allow functions to remember the context in which they were created, including any arguments or variables. This enables the creation of partially applied functions, which can be used to build more specialized functions.
   - **Example**:
     ```javascript
     function curry(fn) {
       return function(x) {
         return function(y) {
           return fn(x, y);
         };
       };
     }
     function add(x, y) {
       return x + y;
     }
     const curriedAdd = curry(add);
     const add5 = curriedAdd(5);
     console.log(add5(3)); // Outputs 8
     ```

3. **Memoization**:
   - **Explanation**: Memoization is a caching technique used to optimize expensive function calls by storing the results of previous calls. Closures are often used to create a cache within the function's scope, allowing it to remember computed values and avoid redundant calculations.
   - **Example**:
     ```javascript
     function memoize(fn) {
       const cache = {};
       return function(...args) {
         const key = JSON.stringify(args);
         if (!(key in cache)) {
           cache[key] = fn(...args);
         }
         return cache[key];
       };
     }
     function expensiveCalculation(x) {
       // Simulate a time-consuming operation
       return x * 2;
     }
     const memoizedCalculation = memoize(expensiveCalculation);
     console.log(memoizedCalculation(5)); // Cached result
     console.log(memoizedCalculation(5)); // Retrieved from cache
     ```

4. **Data Hiding and Encapsulation**:
   - **Explanation**: Closures enable you to create private variables and functions within an outer function's scope. This helps achieve data hiding and encapsulation, as you can control access to data and functionality. Only the parts that are explicitly exposed through a closure are accessible from outside.
   - **Example** (See the first example under "Module Design Pattern" for a practical illustration).

5. **setTimeouts**:
   - **Explanation**: When you use `setTimeout` or `setInterval` to schedule a function to run later, closures play a role in preserving the function's execution context. This means that the function still has access to its local variables and the variables in its parent scope when it's executed later, even if the parent function has already completed.
   - **Example**:
     ```javascript
     function createTimer() {
       let seconds = 0;
       function tick() {
         seconds++;
         console.log(`Seconds elapsed: ${seconds}`);
       }
       return tick;
     }
     const timer = createTimer();
     setTimeout(timer, 1000); // Logs seconds elapsed every second
     ```

In summary, closures are a powerful feature in JavaScript that enable various programming techniques and patterns like module design, currying, memoization, data hiding, and efficient use of `setTimeout` and `setInterval`. They provide a way to manage scope and maintain access to variables and functions even after their parent function has completed execution.


Mutable objects and immutable primitive values

Certainly, I'd be happy to provide code examples to illustrate the difference between mutable objects and immutable primitive values.

Let's start with an example of how objects are mutable:

```javascript
// Mutable Object
const person = {
  name: 'Alice',
  age: 30
};

// Modifying Object Property
person.age = 31;  // Modifying the 'age' property directly

console.log(person);  // Output: { name: 'Alice', age: 31 }
```

In this example, the `age` property of the `person` object is modified directly. The object remains the same object in memory, but its property value is changed.

Now, let's see how this differs from the behavior of immutable primitive values:

```javascript
// Immutable Primitive
let num = 5;

// Reassigning Variable
num = 10;  // Reassigning the 'num' variable to a new value

console.log(num);  // Output: 10
```

In this case, the `num` variable is reassigned to a new value. However, the original value `5` is unchanged. The variable `num` now points to a different value in memory.

In summary:

- For mutable objects, you can modify properties or elements directly without changing the object's reference in memory.
- For immutable primitive values, you can reassign the variable to a new value, but the original value remains unchanged, and you effectively create a new value in memory.

This distinction is important because it affects how we work with data in JavaScript and how we manage changes in values.


